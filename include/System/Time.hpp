// ///////////////////////////////////////////////////////////////////////////
// Copyright (C) 2017 Jimmie Bergmann - jimmiebergmann@gmail.com
//
// This software is provided 'as-is', without any express or
// implied warranty. In no event will the authors be held
// liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute
// it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but
//    is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any
//    source distribution.
// ///////////////////////////////////////////////////////////////////////////

#ifndef QUE_TIME_HPP
#define QUE_TIME_HPP

#include <Build.hpp>

namespace Que
{

	class Time
	{

	public:


		////////////////////////////////////////////////////////////////
		/// \brief Function for initializing a time class
		///
		/// \param p_Seconds Time in seconds.
		///
		////////////////////////////////////////////////////////////////
		static Time Seconds(const double & p_Seconds);

		////////////////////////////////////////////////////////////////
		/// \brief Function for initializing a time class
		///
		/// \param p_Milliseconds Time in milliseconds.
		///
		////////////////////////////////////////////////////////////////
		static Time Milliseconds(const uint64 & p_Milliseconds);

		////////////////////////////////////////////////////////////////
		/// \brief Function for initializing a time class
		///
		/// \param p_Microseconds Time in microseconds.
		///
		////////////////////////////////////////////////////////////////
		static Time Microseconds(const uint64 & p_Microseconds);

		////////////////////////////////////////////////////////////////
		/// \brief Get current system time.
		///
		////////////////////////////////////////////////////////////////
		static Time GetSystemTime();

		////////////////////////////////////////////////////////////////
		/// \brief Default constructor.
		///
		////////////////////////////////////////////////////////////////
		Time();

		////////////////////////////////////////////////////////////////
		/// \brief Get the time in seconds.
		///
		/// \return Time in seconds as a 64 bit floating point value.
		///
		////////////////////////////////////////////////////////////////
		double AsSeconds() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get the time in seconds.
		///
		/// \return Time in milliseconds as a 64 bit floating point value.
		///
		////////////////////////////////////////////////////////////////
		uint64 AsMilliseconds() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get the time in seconds.
		///
		/// \return Time in microseconds as a 64 bit floating point value.
		///
		////////////////////////////////////////////////////////////////
		uint64 AsMicroseconds() const;

		////////////////////////////////////////////////////////////////
		/// \brief Value for representing infinite time.
		///
		////////////////////////////////////////////////////////////////
		static const Time Infinite;

		////////////////////////////////////////////////////////////////
		/// \brief Value for representing zero time.
		///
		////////////////////////////////////////////////////////////////
		static const Time Zero;

		////////////////////////////////////////////////////////////////
		/// \brief Equals to operator
		///
		////////////////////////////////////////////////////////////////
		bool operator == (const Time & p_Time) const;

		////////////////////////////////////////////////////////////////
		/// \brief Equals not to operator
		///
		////////////////////////////////////////////////////////////////
		bool operator != (const Time & p_Time) const;

		////////////////////////////////////////////////////////////////
		/// \brief Greater than operator
		///
		////////////////////////////////////////////////////////////////
		bool operator > (const Time & p_Time) const;

		////////////////////////////////////////////////////////////////
		/// \brief Less than operator
		///
		////////////////////////////////////////////////////////////////
		bool operator < (const Time & p_Time) const;

		////////////////////////////////////////////////////////////////
		/// \brief Greater than or equal to operator
		///
		////////////////////////////////////////////////////////////////
		bool operator >= (const Time & p_Time) const;

		////////////////////////////////////////////////////////////////
		/// \brief Less than or equal to operator
		///
		////////////////////////////////////////////////////////////////
		bool operator <= (const Time & p_Time) const;

		////////////////////////////////////////////////////////////////
		/// \brief Plus operator, add two time classes together.
		///
		////////////////////////////////////////////////////////////////
		Time operator + (const Time & p_Time) const;

		////////////////////////////////////////////////////////////////
		/// \brief Add operator, add time to this time class.
		///
		////////////////////////////////////////////////////////////////
		Time & operator += (const Time & p_Time);

		////////////////////////////////////////////////////////////////
		/// \brief Minus operator
		///
		////////////////////////////////////////////////////////////////
		Time operator - (const Time & p_Time) const;

		////////////////////////////////////////////////////////////////
		/// \brief Multiply operator
		///
		////////////////////////////////////////////////////////////////
		Time operator * (const uint64 & p_Value) const;

		////////////////////////////////////////////////////////////////
		/// \brief Division operator
		///
		////////////////////////////////////////////////////////////////
		Time operator / (const uint64 & p_Value) const;

		////////////////////////////////////////////////////////////////
		/// \brief Modulus operator
		///
		////////////////////////////////////////////////////////////////
		Time operator % (const Time & p_Time) const;

		////////////////////////////////////////////////////////////////
		/// \brief Boolean operator, Check if time != 0
		///
		////////////////////////////////////////////////////////////////
		operator bool () const;

	private:

		// Private functions
		Time(const uint64 & p_Microseconds);

		// Private variables
		uint64 m_Microseconds;	///< Time in nanoseconds.

	};

}

#endif