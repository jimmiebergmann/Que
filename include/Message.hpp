// ///////////////////////////////////////////////////////////////////////////
// Copyright (C) 2017 Jimmie Bergmann - jimmiebergmann@gmail.com
//
// This software is provided 'as-is', without any express or
// implied warranty. In no event will the authors be held
// liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute
// it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but
//    is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any
//    source distribution.
// ///////////////////////////////////////////////////////////////////////////

#ifndef QUE_MESSAGE_HPP
#define QUE_MESSAGE_HPP

#include <Build.hpp>
#include <cstring>
#include <System/Time.hpp>

namespace Que
{

	////////////////////////////////////////////////////////////////
	/// \brief Message class
	///
	////////////////////////////////////////////////////////////////
	class Message
	{

	public:

		////////////////////////////////////////////////////////////////
		/// \brief Constructor. Will copy input message.
		///
		/// \param p_pMessage Pointer to message data to copy. Can be NULL for empty messages.
		/// \param p_Size Size of message data.
		///
		////////////////////////////////////////////////////////////////
		Message(const void * p_pMessage,
			const unsigned int p_Size,
			const uint64 p_Producer);

		////////////////////////////////////////////////////////////////
		/// \brief Destrucotr. Clean upp allocated data.
		///
		////////////////////////////////////////////////////////////////
		~Message();

		////////////////////////////////////////////////////////////////
		/// \brief Get message data.
		///
		////////////////////////////////////////////////////////////////
		template <typename T>
		const T Get() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get message size
		///
		////////////////////////////////////////////////////////////////
		unsigned int GetSize() const;

		////////////////////////////////////////////////////////////////
		/// \brief Set id of current consumer. Also sets pulled time.
		///
		////////////////////////////////////////////////////////////////
		void SetConsumer(const uint64 p_Consumer);

		////////////////////////////////////////////////////////////////
		/// \brief Get id of producer.
		///
		////////////////////////////////////////////////////////////////
		uint64 GetProdcer() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get id of current consumer.
		///
		////////////////////////////////////////////////////////////////
		uint64 GetConsumer() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get system time of when the message was pushed.
		///
		////////////////////////////////////////////////////////////////
		const Time & GetPushTime() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get system time of when the message was pulled.
		///
		////////////////////////////////////////////////////////////////
		const Time & GetPullTime() const;

	private:

		////////////////////////////////////////////////////////////////
		/// \brief Copy safe constructor.
		///
		////////////////////////////////////////////////////////////////
		Message(const Message & p_Message);

		////////////////////////////////////////////////////////////////
		/// \brief Copy safe operator.
		///
		////////////////////////////////////////////////////////////////
		Message & operator = (const Message & p_Message);

		// Private variables
		char *			m_pMessage;		///< Message.
		unsigned int	m_Size;			///< Size of message.
		uint64			m_Producer;		///< Id of producer.
		uint64			m_Consumer;		///< If of consumer.
		Time			m_PushedTime;	///< System time of when the message was pushed.
		Time			m_PulledTime;	///< System time of when the message was pulled the last time.

	};


	////////////////////////////////////////////////////////////////
	// Include the inline file.
	////////////////////////////////////////////////////////////////
	#include <Message.inl>

}

#endif