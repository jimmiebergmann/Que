// ///////////////////////////////////////////////////////////////////////////
// Copyright (C) 2017 Jimmie Bergmann - jimmiebergmann@gmail.com
//
// This software is provided 'as-is', without any express or
// implied warranty. In no event will the authors be held
// liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute
// it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but
//    is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any
//    source distribution.
// ///////////////////////////////////////////////////////////////////////////

#ifndef QUE_ADDRESS_HPP
#define QUE_ADDRESS_HPP

#include <Build.hpp>
#include <string>

namespace Que
{

	class Address
	{

	public:

		////////////////////////////////////////////////////////////////
		/// \brief Default constructor
		///
		////////////////////////////////////////////////////////////////
		Address();

		////////////////////////////////////////////////////////////////
		/// \brief Constructor
		/// 
		/// \param p_A First field of the address.
		/// \param p_B Second field of the address.
		/// \param p_C Third field of the address.
		/// \param p_D Thourth field of the address.
		/// \param p_Port The port.
		///
		////////////////////////////////////////////////////////////////
		Address(const unsigned char p_A, const unsigned char p_B,
			const unsigned char p_C, const unsigned char p_D);

		////////////////////////////////////////////////////////////////
		/// \brief Constructor
		/// 
		/// \param p_Address The address.
		///
		////////////////////////////////////////////////////////////////
		Address(const unsigned int p_Address);

		////////////////////////////////////////////////////////////////
		/// \brief Constructor, initialize from a string.
		/// 
		/// \param p_String The input string.
		///
		/// \see SetAddressFromString
		///
		////////////////////////////////////////////////////////////////
		Address(const std::string & p_String);

		////////////////////////////////////////////////////////////////
		/// \brief Initialize the address from a string
		///
		/// For example: "127.0.0.1"
		/// 
		/// \param p_String The input string.
		///
		////////////////////////////////////////////////////////////////
		bool SetAddressFromString(const std::string & p_String);

		////////////////////////////////////////////////////////////////
		/// \brief Get the address.
		///
		////////////////////////////////////////////////////////////////
		unsigned int GetAddress() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get the first field of the address.
		///
		////////////////////////////////////////////////////////////////
		unsigned char GetA() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get the second field of the address.
		///
		////////////////////////////////////////////////////////////////
		unsigned char GetB() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get the third field of the address.
		///
		////////////////////////////////////////////////////////////////
		unsigned char GetC() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get the thourth field of the address.
		///
		////////////////////////////////////////////////////////////////
		unsigned char GetD() const;

		////////////////////////////////////////////////////////////////
		/// \brief Get pretty formated string.
		///
		/// Example: 192.168.1.1
		///
		////////////////////////////////////////////////////////////////
		std::string GetPretty() const;

		////////////////////////////////////////////////////////////////
		/// \brief Setting the first field of the address.
		/// 
		////////////////////////////////////////////////////////////////
		void SetA(const unsigned char p_A);

		////////////////////////////////////////////////////////////////
		/// \brief Setting the second field of the address.
		/// 
		////////////////////////////////////////////////////////////////
		void SetB(const unsigned char p_B);

		////////////////////////////////////////////////////////////////
		/// \brief Setting the third field of the address.
		/// 
		////////////////////////////////////////////////////////////////
		void SetC(const unsigned char p_C);

		////////////////////////////////////////////////////////////////
		/// \brief Setting the thourth field of the address.
		/// 
		////////////////////////////////////////////////////////////////
		void SetD(const unsigned char p_D);

		////////////////////////////////////////////////////////////////
		/// \brief Equal to operator.
		///
		/// Compares two addresses.
		///
		////////////////////////////////////////////////////////////////
		bool operator == (const Address & p_Address) const;

		////////////////////////////////////////////////////////////////
		/// \brief Not equal to operator.
		///
		/// Compares two addresses.
		///
		////////////////////////////////////////////////////////////////
		bool operator != (const Address & p_Address) const;

		////////////////////////////////////////////////////////////////
		/// \brief Less than to operator.
		///
		////////////////////////////////////////////////////////////////
		bool operator < (const Address & p_Address) const;

		////////////////////////////////////////////////////////////////
		/// \brief Larger than to operator.
		///
		////////////////////////////////////////////////////////////////
		bool operator > (const Address & p_Address) const;

		////////////////////////////////////////////////////////////////
		/// \brief Static address for address validation.
		///
		/// Compares this address against any to check if it's is valid.
		///
		////////////////////////////////////////////////////////////////
		static const Address NoAddress;

		////////////////////////////////////////////////////////////////
		/// \brief Static local host address: 127.0.0.1
		///
		////////////////////////////////////////////////////////////////
		static const Address Localhost;

	private:

		// Private variables
		unsigned int m_Address;	///< The address.

	};

}


#endif